- Para criar projeto em Angular:
    - Navegar até a pasta que deseja criar o projeto;
    - No terminal, digitar o comando: ng new nomeDoProjeto;
    - Para o nomeDoProjeto é obrigatório que o nome criado comece com uma letra;

- No projeto, iremos trabalhamos dentro de src > app

- Para criar um componente:
    - ng g c nomeDoComponente

- MÓDULOS
    Módulo é o arquivo que nos ajudará a organizar e modularizar a aplicação. Podemos ter diferentes componentes dentro de um módulo e podemos escolher o que queremos expor para outros módulos da aplicação.

    - O que tem dentro de um módulo e o que cada um dos meta dados faz:
        - export class AppModule { } : declaração da classe de acordo com o padrão ES6;
        - @NgModule({}) : decorator;
            - declarations : onde listamos todos os componentes, diretivas e pipes que serão utilizados no módulo;
            - imports : onde importamos os módulos que utilizaremos no módulo ou em um componente que pertence ao módulo;
            - providers : onde colocamos os serviços que ficarão disponíveis a todos os componetes declarados no declarations do módulo;
            - bootstrap : encontrado somente no módulo raiz do projeto. Declaramos aqui no componente que deve ser instanciado ao iniciar a aplicação, que será o componente que servirá como container do projeto.
        - BrowserModule : prepara a aplicação para ser rodada/executada em um browser;
        - FormsModule : 2 way data-binding e formulários do Angular;
        - HttpModule : módulo que contém o objeto http que utilizamos para fazer as requisições AJAX do projeto;
    
    - Feature module: módulos de funcionalidades, módulos locais da aplicação, feito para facilitar a importação do que somente for necessário aos seus componentes.
        - No módulo de funcionalidade temos o CommonModule que contém as diretivas e pipes mais comuns a serem utilizados.
        - exports : indica quais são os componentes que gostaríamos de expor para outros módulos. Caso não queriamos que nosso componente fique visível para outros módulos, basta não declarar o exports;

    - Para criar um módulo:
        - ng g m nomeDoModulo

- TEMPLATES
    - Interpolação: Para tornar um conteúdo dinâmico no HTML, podemos declarar e inicializar uma variável no component.ts e depois usar a interpolação para chamar essa variável no HTML
        Exemplo: {{ nomeDaVariavel }}
    - Diretiva *ngFor: Criar o array de itens e itera-lo no HTML.
        Exemplo: component.ts: cursos: string[] = ["Java", "Ext JS", "Angular"];
                 HTML: <li *ngFor="let curso of cursos">{{ curso }}</li>

- SERVICES
    - utilizadas para separar as requisições do componente, sendo responsável por interagir com a API (servidor) e enviar ao componente.
    - Para criar uma service via CLI: ng g s nomeDoServico.
    - Injeção de depêndencia: Segundo a documentação do Angular - "um padrão de design no qual uma classe solicita dependências de fontes externas, em vez de criá-las"
        Fazemos a injeção através do decorator "Injectable()", que significa que a classe do serviço onde ele é usado pode ser injetado em outra classe para que o uso dela possa ser feito.
    - Como a injeção de depêndencia pode ser feita: no Angular é feito via construtor.

- PROPERTY BINDING AND INTERPOLATION
    - Data binding: é uma forma de associar informações que estão no template para o componente ou do componente para o template. Ou seja uma variável, um atributo ou um método que retorna um valor, conseguimos mostrar no componente.
    - Interpolação: {{ valor }}
    - Property binding: associação de propriedade - [propriedade]="valor" - onde conseguimos ter a saída de um atributo do componente para o template. Também podemos ter o contrário, através de escutar eventos do template (click, foco, etc) e executar um método no componente - (evento)="handle"
    - Two way data binding: [(ngModel)]="propriedade" - podemos manter tanto o template quanto o componente atualizados ao mesmo tempo. Muito utilizado em formulários.
    - Property binding:
        - <img [src]="urlImagem"/>
        - Quando não existe uma propriedade no elemento, usa-se [attr.colspan]
